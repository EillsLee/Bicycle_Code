C251 COMPILER V5.60.0,  zf_uart                                                            29/04/21  07:07:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_uart
OBJECT MODULE PLACED IN .\Out_File\zf_uart.obj
COMPILER INVOKED BY: E:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_uart.c XSMALL INTR2 WARNINGLEVEL
                    -(3) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\US
                    -ER\inc;..\USER\src;..\USER\src\MPU6050_FILE) DEBUG PRINT(.\Out_File\zf_uart.lst) TABS(2) OBJECT(.\Out_File\zf_uart.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          uart
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC16F40K128
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "zf_uart.h"
   21          #include "outputdata.h"
   22          #include "board.h"
   23             
   24          
   25          
   26          uint8 busy[5];         //接收忙标志位
   27          
   28          uint8 uart1_tx_buff[UART1_TX_BUFFER_SIZE];  //发送缓冲
   29          uint8 uart1_rx_buff[UART1_RX_BUFFER_SIZE];  //接收缓冲
   30          
   31          
   32          //-------------------------------------------------------------------------------------------------------
             -------------
   33          //  @brief      串口初始化
   34          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
   35          //  @param      uart_rx_pin     串口波特率
   36          //  @param      uart_tx_pin     串口接收发送引脚
   37          //  @param      baud          串口接收发送引脚
   38          //  @param      tim_n         使用tim_n作为串口波特率发生器(TIM1-TIM4)
   39          //  @return     NULL            
   40          //  Sample usage:               uart_init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM_2);        //初
             -始化串口1 波特率115200 发送引脚使用P31 接收引脚使用P30 ,使用定时器2作为波特率发生器
   41          //  @note                       串口1使用 定时器1或者定时器2 作为波特率发生器。
   42          //                串口2使用 定时器2        作为波特率发生器。
   43          //                串口3使用 定时器3或者定时器2 作为波特率发生器。
   44          //                串口4使用 定时器4或者定时器2 作为波特率发生器。
   45          //                              STC8H仅有 定时器0-定时器4，这5个定时器。
   46          //                编码器采集数据也需要定时器作为外部计数。
   47          //                如果不同的串口，使用同一个定时器，串口的波特率以最后一个初始化为准
   48          //-------------------------------------------------------------------------------------------------------
             -------------
   49          void uart_init(UARTN_enum uart_n, UARTPIN_enum uart_rx_pin, UARTPIN_enum uart_tx_pin, uint32 baud, TIMN_e
             -num tim_n)
   50          {
   51   1          uint16 brt;
C251 COMPILER V5.60.0,  zf_uart                                                            29/04/21  07:07:02  PAGE 2   

   52   1      
   53   1        brt = (uint16)(65536 - (sys_clk/baud/4));
   54   1      
   55   1      
   56   1        switch(uart_n)
   57   1        {
   58   2          case UART_1:
   59   2          {
   60   3            if(TIM_1 == tim_n)
   61   3            {
   62   4              SCON |= 0x50;
   63   4              TMOD |= 0x00;
   64   4              TL1 = brt;
   65   4              TH1 = brt >> 8;
   66   4              AUXR |= 0x40;
   67   4              TR1 = 1;
   68   4              busy[1] = 0;
   69   4            }
   70   3            else if(TIM_2 == tim_n)
   71   3            {
   72   4              SCON |= 0x50;
   73   4              T2L = brt;
   74   4              T2H = brt >> 8;
   75   4              AUXR |= 0x15;
   76   4            }
   77   3            P_SW1 &= ~(0x03<<6);
   78   3            if((UART1_RX_P30 == uart_rx_pin) && (UART1_TX_P31 == uart_tx_pin))
   79   3            {
   80   4              P_SW1 |= 0x00;
   81   4            }
   82   3            else if((UART1_RX_P36 == uart_rx_pin) && (UART1_TX_P37 == uart_tx_pin))
   83   3            {
   84   4              P_SW1 |= 0x40;
   85   4            }
   86   3            else if((UART1_RX_P16 == uart_rx_pin) && (UART1_TX_P17 == uart_tx_pin))
   87   3            {
   88   4              P_SW1 |= 0x80;
   89   4            }
   90   3            else if((UART1_RX_P43 == uart_rx_pin) && (UART1_TX_P44 == uart_tx_pin))
   91   3            {
   92   4              P_SW1 |= 0xc0;
   93   4            }
   94   3            busy[1] = 0;
   95   3            ES = 1;
   96   3            break;
   97   3          }
   98   2          
   99   2          case UART_2:
  100   2          {
  101   3            if(TIM_2 == tim_n)
  102   3            {
  103   4              S2CON |= 0x10;
  104   4              T2L = brt;
  105   4              T2H = brt >> 8;
  106   4              AUXR |= 0x14;
  107   4            }
  108   3            
  109   3            P_SW2 &= ~(0x01<<0);
  110   3            if((UART2_RX_P10 == uart_rx_pin) && (UART2_TX_P11 == uart_tx_pin))
  111   3            {
  112   4              P_SW2 |= 0x00;
  113   4            }
  114   3            else if((UART2_RX_P46 == uart_rx_pin) && (UART2_TX_P47 == uart_tx_pin))
  115   3            {
  116   4              P_SW2 |= 0x01;
  117   4            }
C251 COMPILER V5.60.0,  zf_uart                                                            29/04/21  07:07:02  PAGE 3   

  118   3            
  119   3            IE2 |= 0x01 << 0; //允许串行口2中断
  120   3            busy[2] = 0;
  121   3            break;
  122   3          }
  123   2          
  124   2          case UART_3:
  125   2          {
  126   3            if(TIM_2 == tim_n)
  127   3            {
  128   4              S2CON |= 0x10;
  129   4              T2L = brt;
  130   4              T2H = brt >> 8;
  131   4              AUXR |= 0x14;
  132   4            }
  133   3            else if(TIM_3 == tim_n)
  134   3            {
  135   4              S3CON |= 0x50;
  136   4              T3L = brt;
  137   4              T3H = brt >> 8;
  138   4              T4T3M |= 0x0a;
  139   4            }
  140   3            
  141   3            P_SW2 &= ~(0x01<<1);
  142   3            if((UART3_RX_P00 == uart_rx_pin) && (UART3_TX_P01 == uart_tx_pin))
  143   3            {
  144   4              P_SW2 |= 0x00;
  145   4            }
  146   3            else if((UART3_RX_P50 == uart_rx_pin) && (UART3_TX_P51 == uart_tx_pin))
  147   3            {
  148   4              P_SW2 |= 0x02;
  149   4            }
  150   3            
  151   3            IE2 |= 0x01<<3; //允许串行口3中断
  152   3            busy[3] = 0;
  153   3            break;
  154   3          }
  155   2          
  156   2          case UART_4:
  157   2          {
  158   3            if(TIM_2 == tim_n)
  159   3            {
  160   4              S4CON |= 0x10;
  161   4              T2L = brt;
  162   4              T2H = brt >> 8;
  163   4              AUXR |= 0x14;
  164   4            }
  165   3            else if(TIM_4 == tim_n)
  166   3            {
  167   4              S4CON |= 0x50;
  168   4              T4L = brt;
  169   4              T4H = brt >> 8;
  170   4              T4T3M |= 0xa0;
  171   4            }
  172   3      
  173   3            P_SW2 &= ~(0x01<<2);
  174   3            if((UART4_RX_P02 == uart_rx_pin) && (UART4_TX_P03 == uart_tx_pin))
  175   3            {
  176   4              P_SW2 |= 0x00;
  177   4            }
  178   3            else if((UART4_RX_P52 == uart_rx_pin) && (UART4_TX_P53 == uart_tx_pin))
  179   3            {
  180   4              P5M0 = 0x00;
  181   4              P5M1 = 0x01<<2;//P5.2 需要设置为高阻
  182   4              P_SW2 |= 0x04;
  183   4            }
C251 COMPILER V5.60.0,  zf_uart                                                            29/04/21  07:07:02  PAGE 4   

  184   3            IE2 |= 0x01<<4; //允许串行口4中断
  185   3            busy[4] = 0;
  186   3            break;
  187   3          }
  188   2          
  189   2        }
  190   1      
  191   1      }
  192          
  193          //-------------------------------------------------------------------------------------------------------
             -------------
  194          //  @brief      串口字节输出
  195          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  196          //  @param      dat             需要发送的字节
  197          //  @return     void        
  198          //  Sample usage:               uart_putchar(UART_1,0xA5);       // 串口1发送0xA5
  199          //-------------------------------------------------------------------------------------------------------
             -------------
  200          void uart_putchar(UARTN_enum uart_n,uint8 dat)
  201          {
  202   1        switch(uart_n)
  203   1        {
  204   2          case UART_1:
  205   2            while (busy[1]);
  206   2            busy[1] = 1;
  207   2            SBUF = dat;
  208   2              break;
  209   2          case UART_2:
  210   2            while (busy[2]);
  211   2            busy[2] = 1;
  212   2            S2BUF = dat;
  213   2              break;
  214   2          case UART_3:
  215   2            while (busy[3]);
  216   2            busy[3] = 1;
  217   2            S3BUF = dat;
  218   2              break;
  219   2          case UART_4:
  220   2            while (busy[4]);
  221   2            busy[4] = 1;
  222   2            S4BUF = dat;
  223   2              break;
  224   2        }
  225   1      }
  226          
  227          
  228          //-------------------------------------------------------------------------------------------------------
             -------------
  229          //  @brief      串口发送数组
  230          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  231          //  @param      *buff           要发送的数组地址
  232          //  @param      len             发送长度
  233          //  @return     void
  234          //  Sample usage:               uart_putbuff(UART_1,&a[0],5);
  235          //-------------------------------------------------------------------------------------------------------
             -------------
  236          void uart_putbuff(UARTN_enum uart_n,uint8 *p,uint16 len)
  237          {
  238   1          while(len--)
  239   1              uart_putchar(uart_n,*p++);
  240   1      }
  241          
  242          
  243          //-------------------------------------------------------------------------------------------------------
             -------------
  244          //  @brief      串口发送字符串
C251 COMPILER V5.60.0,  zf_uart                                                            29/04/21  07:07:02  PAGE 5   

  245          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  246          //  @param      *str            要发送的字符串地址
  247          //  @return     void
  248          //  Sample usage:               uart_putstr(UART_1,"i lvoe you"); 
  249          //-------------------------------------------------------------------------------------------------------
             -------------
  250          void uart_putstr(UARTN_enum uart_n,uint8 *str,uint16 len)
  251          {
  252   1          while(len--)
  253   1              uart_putchar(uart_n,*str++);
  254   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       621     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       205         14
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
