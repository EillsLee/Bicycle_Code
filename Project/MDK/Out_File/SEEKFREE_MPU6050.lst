C251 COMPILER V5.60.0,  SEEKFREE_MPU6050                                                   29/04/21  07:07:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE SEEKFREE_MPU6050
OBJECT MODULE PLACED IN .\Out_File\SEEKFREE_MPU6050.obj
COMPILER INVOKED BY: E:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_peripheral\SEEKFREE_MPU6050.c XSMALL INTR2 WA
                    -RNINGLEVEL(3) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_periph
                    -eral;..\USER\inc;..\USER\src;..\USER\src\MPU6050_FILE) DEBUG PRINT(.\Out_File\SEEKFREE_MPU6050.lst) TABS(2) OBJECT(.\Out
                    -_File\SEEKFREE_MPU6050.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2018,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          MPU6050
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ3184284598)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Taobao      https://seekfree.taobao.com/
   16           * @date          2019-04-30
   17           * @note    
   18                    接线定义：
   19                    ------------------------------------ 
   20                      软件IIC
   21                                  SCL                 查看SEEKFREE_IIC文件内的SEEKFREE_SCL宏定义
   22                      SDA                 查看SEEKFREE_IIC文件内的SEEKFREE_SDA宏定义
   23                    ------------------------------------ 
   24           ********************************************************************************************************
             -************/
   25          
   26          
   27          #include "SEEKFREE_IIC.h"
   28          #include "SEEKFREE_MPU6050.h"
   29          #include "zf_delay.h"
   30          #include "SEEKFREE_OLED.h"
   31          
   32          #define M_PI 3.14159265358979323846
   33          
   34          
   35          int16 mpu_gyro_x,mpu_gyro_y,mpu_gyro_z;
   36          int16 mpu_acc_x,mpu_acc_y,mpu_acc_z;
   37          
   38          
   39          
   40          
   41          
   42          //-------------------------------------------------------------------------------------------------------
             -------------
   43          //  @brief      MPU6050自检函数
   44          //  @param      NULL
   45          //  @return     void          
   46          //  @since      v1.0
   47          //  Sample usage:       
   48          //-------------------------------------------------------------------------------------------------------
             -------------
   49          void mpu6050_self1_check(void)
   50          {
   51   1          simiic_write_reg(MPU6050_DEV_ADDR, PWR_MGMT_1, 0x00); //解除休眠状态
   52   1          simiic_write_reg(MPU6050_DEV_ADDR, SMPLRT_DIV, 0x07);   //125HZ采样率
C251 COMPILER V5.60.0,  SEEKFREE_MPU6050                                                   29/04/21  07:07:02  PAGE 2   

   53   1          while(0x07 != simiic_read_reg(MPU6050_DEV_ADDR, SMPLRT_DIV,SIMIIC))
   54   1          {
   55   2          delay_ms(1);
   56   2              //卡在这里原因有以下几点
   57   2              //1 MPU6050坏了，如果是新的这样的概率极低
   58   2              //2 接线错误或者没有接好
   59   2              //3 可能你需要外接上拉电阻，上拉到3.3V
   60   2          //4 可能没有调用模拟IIC的初始化函数
   61   2          }
   62   1      }
   63          
   64          
   65          //-------------------------------------------------------------------------------------------------------
             -------------
   66          //  @brief      初始化MPU6050
   67          //  @param      NULL
   68          //  @return     void          
   69          //  @since      v1.0
   70          //  Sample usage:       
   71          //-------------------------------------------------------------------------------------------------------
             -------------
   72          void mpu6050_init(void)
   73          {
   74   1          delay_ms(100);                                   //上电延时
   75   1      
   76   1          mpu6050_self1_check();
   77   1          simiic_write_reg(MPU6050_DEV_ADDR, PWR_MGMT_1, 0x00); //解除休眠状态
   78   1          simiic_write_reg(MPU6050_DEV_ADDR, SMPLRT_DIV, 0x07);   //125HZ采样率
   79   1          simiic_write_reg(MPU6050_DEV_ADDR, MPU6050_CONFIG, 0x04);       //
   80   1          simiic_write_reg(MPU6050_DEV_ADDR, GYRO_CONFIG, 0x18);  //2000
   81   1          simiic_write_reg(MPU6050_DEV_ADDR, ACCEL_CONFIG, 0x10); //8g
   82   1        simiic_write_reg(MPU6050_DEV_ADDR, User_Control, 0x00);
   83   1          simiic_write_reg(MPU6050_DEV_ADDR, INT_PIN_CFG, 0x02);
   84   1      }
   85          
   86          
   87          
   88          //-------------------------------------------------------------------------------------------------------
             -------------
   89          //  @brief      获取MPU6050加速度计数据
   90          //  @param      NULL
   91          //  @return     void
   92          //  @since      v1.0
   93          //  Sample usage:       执行该函数后，直接查看对应的变量即可
   94          //-------------------------------------------------------------------------------------------------------
             -------------
   95          void mpu6050_get_accdata(void)
   96          {
   97   1          uint8 dat[6];
   98   1      
   99   1          simiic_read_regs(MPU6050_DEV_ADDR, ACCEL_XOUT_H, dat, 6, SIMIIC);  
  100   1          mpu_acc_x = (int16)(((uint16)dat[0]<<8 | dat[1]));
  101   1          mpu_acc_y = (int16)(((uint16)dat[2]<<8 | dat[3]));
  102   1          mpu_acc_z = (int16)(((uint16)dat[4]<<8 | dat[5]));
  103   1      }
  104          
  105          
  106          //-------------------------------------------------------------------------------------------------------
             -------------
  107          //  @brief      获取MPU6050陀螺仪数据
  108          //  @param      NULL
  109          //  @return     void
  110          //  @since      v1.0
  111          //  Sample usage:       执行该函数后，直接查看对应的变量即可
  112          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  SEEKFREE_MPU6050                                                   29/04/21  07:07:02  PAGE 3   

  113          void mpu6050_get_gyro(void)
  114          {
  115   1          uint8 dat[6];
  116   1      
  117   1          simiic_read_regs(MPU6050_DEV_ADDR, GYRO_XOUT_H, dat, 6, SIMIIC);  
  118   1          mpu_gyro_x = (int16)(((uint16)dat[0]<<8 | dat[1]));
  119   1          mpu_gyro_y = (int16)(((uint16)dat[2]<<8 | dat[3]));
  120   1          mpu_gyro_z = (int16)(((uint16)dat[4]<<8 | dat[5]));
  121   1      }
  122          //-------------------------------------------------------------------------------------------------------
             -------------
  123          //  @brief      获取MPU6050陀螺仪&&加速度计数据
  124          //  @param      NULL
  125          //  @return     void
  126          //  @since      v1.0
  127          //  Sample usage:       执行该函数后，直接查看对应的变量即可
  128          //-------------------------------------------------------------------------------------------------------
             -------------
  129          void MPU6050_get_GyandAcc(void)
  130          {
  131   1          mpu6050_get_accdata();
  132   1          mpu6050_get_gyro();
  133   1      }
  134          
  135          //get accel and gyro from iam20609 
  136          // 对accel一阶低通滤波(参考匿名)，对gyro转成弧度每秒(2000dps)
  137          #define new_weight           0.35f
  138          #define old_weight           0.65f
  139          void IMU_getValues(float * values) 
  140          {  
  141   1          static float lastaccel[3]= {0,0,0};
  142   1          int i;
  143   1          values[0] = ((float)mpu_acc_x) * new_weight + lastaccel[0] * old_weight;
  144   1          values[1] = ((float)mpu_acc_y) * new_weight + lastaccel[1] * old_weight;
  145   1          values[2] = ((float)mpu_acc_z) * new_weight + lastaccel[2] * old_weight;
  146   1          for(i=0; i<3; i++)
  147   1          {
  148   2              lastaccel[i] = values[i];
  149   2          }
  150   1       
  151   1          values[3] = ((float)mpu_gyro_x) * M_PI / 180 / 16.4f;
  152   1          values[4] = ((float)mpu_gyro_y) * M_PI / 180 / 16.4f;
  153   1          values[5] = ((float)mpu_gyro_z) * M_PI / 180 / 16.4f;
  154   1       
  155   1          //
  156   1      }
  157          float Angle=0.0;
  158          float Gyro_x=0.0;
  159          float Q_angle=0.001; //陀螺仪噪声协方差
  160          float Q_gyro=0.003;  //陀螺仪漂移噪声协方差
  161          float R_angle=0.03;   //加速度计测量噪声协方差
  162          float dt=0.001;
  163          float PCt_0=0, PCt_1=0, E=0;  //中间变量
  164          char C_0=1;      //H矩阵的系数
  165          float Q_bias=0,Angle_err=0;
  166          float K_0=0,K_1=0,t_0=0,t_1=0; //卡尔曼增益
  167          float Pdot[4] ={0,0,0,0};    //P矩阵中间变量
  168          float PP[2][2] = { { 1, 0 },{ 0, 1 } };   //P矩阵  X的协方差
  169          
  170           
  171          float KalmanFilter(float Accel,float Gyro)    
  172          {
  173   1          static float Angle = 0, Gyro_y = 0;
  174   1        Angle+=(Gyro - Q_bias) * dt; //先验估计
  175   1       
  176   1        Pdot[0]=Q_angle - PP[0][1] - PP[1][0]; // Pk-先验估计误差协方差的微分
C251 COMPILER V5.60.0,  SEEKFREE_MPU6050                                                   29/04/21  07:07:02  PAGE 4   

  177   1       
  178   1        Pdot[1] = -PP[1][1];
  179   1        Pdot[2] = -PP[1][1];
  180   1        Pdot[3]= Q_gyro;
  181   1        
  182   1        PP[0][0] += Pdot[0] * dt;   // Pk-先验估计误差协方差微分的积分
  183   1        PP[0][1] += Pdot[1] * dt;   // 先验估计误差协方差
  184   1        PP[1][0] += Pdot[2] * dt;
  185   1        PP[1][1] += Pdot[3] * dt;
  186   1        
  187   1        PCt_0 = C_0 * PP[0][0];   //a
  188   1        PCt_1 = C_0 * PP[1][0];   //c
  189   1        E = R_angle + C_0 * PCt_0;  //分母
  190   1        K_0 = PCt_0 / E;
  191   1        K_1 = PCt_1 / E;
  192   1        
  193   1        Angle_err = Accel - Angle;  //zk-先验估计 
  194   1        Angle += K_0 * Angle_err;  //后验估计
  195   1        Q_bias  += K_1 * Angle_err;  //后验估计
  196   1        Gyro_y   = Gyro - Q_bias;  //输出值(后验估计)的微分=角速度
  197   1      
  198   1        t_0 = PCt_0;
  199   1        t_1 = C_0 * PP[0][1];
  200   1       
  201   1        PP[0][0] -= K_0 * t_0;     //后验估计误差协方差
  202   1        PP[0][1] -= K_0 * t_1;
  203   1        PP[1][0] -= K_1 * t_0;
  204   1        PP[1][1] -= K_1 * t_1;
  205   1      
  206   1        return Angle;
  207   1      }
  208          // #define delta_T      0.005f  //5ms计算一次
  209           
  210          // float I_ex, I_ey, I_ez;  // 误差积分
  211          // quaterInfo_t Q_info;  // 全局四元数
  212          // eulerianAngles_t eulerAngle; //欧拉角
  213          // float param_Kp = 50.0;   // 加速度计(磁力计)的收敛速率比例增益50 
  214          // float param_Ki = 0.20;   //陀螺仪收敛速率的积分增益 0.2
  215          typedef struct
  216          {
  217            float w, x, y, z;
  218          }Quat_t;//四元素结构体
  219          // w = cos(theta/2)    
  220          // x  = ax * sin(theta/2)    
  221          // y  = ay * sin(theta/2)    
  222          // z  = az * sin(theta/2)  
  223          
  224          
  225          typedef struct
  226          {
  227            float Pitch;
  228            float Roll;
  229            float Yaw;
  230          }Euler_t;//欧拉角结构体
  231          
  232          
  233          //欧拉角转四元素
  234          //euler_angle：输入欧拉角
  235          //q1：输出四元素
  236          // int Conversion_Euler_to_Quaternion(Quat_t q1, Euler_t euler_angle)
  237          // {
  238          //  euler_angle.Yaw = euler_angle.Yaw *  M_PI / 180;
  239          //  euler_angle.Pitch = euler_angle.Pitch * M_PI / 180;
  240          //  euler_angle.Roll = euler_angle.Roll * M_PI / 180;
  241          //  double c1 = acos(euler_angle.Yaw / 2);
  242          //  double s1 = asin(euler_angle.Yaw / 2);
C251 COMPILER V5.60.0,  SEEKFREE_MPU6050                                                   29/04/21  07:07:02  PAGE 5   

  243          //  double c2 = acos(euler_angle.Pitch / 2);
  244          //  double s2 = asin(euler_angle.Pitch / 2);
  245          //  double c3 = acos(euler_angle.Roll / 2);
  246          //  double s3 = asin(euler_angle.Roll / 2);
  247          //  double c1c2 = c1 * c2;
  248          //  double s1s2 = s1 * s2;
  249          //  q1.w = (c1c2 * c3 + s1s2 * s3);
  250          //  q1.x = (c1c2 * s3 + s1s2 * c3);
  251          //  q1.y = (s1 * c2 * c3 + c1 * s2 * s3);
  252          //  q1.z = (c1 * s2 * c3 - s1 * c2 * s3);
  253          //  return 0;
  254          // }
  255          
  256          // //四元素转欧拉角
  257          // //quat:输入四元素
  258          // //euler:输出欧拉角
  259          // int Conversion_Quaternion_to_Euler(Quat_t *quat, Euler_t *euler)
  260          // {
  261          //  double q0, q1, q2, q3;
  262          //  q0 = quat->w;
  263          //  q1 = quat->x;
  264          //  q2 = quat->y;
  265          //  q3 = quat->z;
  266          //  euler->Pitch = (float)(asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3); // pitch
  267          //  euler->Roll = (float)(atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3); // roll
  268          //  euler->Yaw = (float)(atan2(2 * (q1*q2 + q0*q3), q0*q0 + q1*q1 - q2*q2 - q3*q3) * 57.3);
  269          //  return 0;
  270          // }
  271          
  272          // //四元素旋转
  273          // //quat1:输入原始四元素
  274          // //quat2:输入旋转向量四元素
  275          // //返回：输出旋转后的四元素
  276          // int quat_pro(Quat_t *quat1, Quat_t *quat2, Quat_t *quat3)
  277          // {
  278          //  float w1, x1, y1, z1;
  279          //  float w2, x2, y2, z2;
  280          //  w2 = quat1->w;
  281          //  x2 = quat1->x;
  282          //  y2 = quat1->y;
  283          //  z2 = quat1->z;
  284          
  285          //  w1 = quat2->w;
  286          //  x1 = quat2->x;
  287          //  y1 = quat2->y;
  288          //  z1 = quat2->z;
  289          
  290          //  quat3->w = w1*w2 - x1*x2 - y1*y2 - z1*z2;
  291          //  quat3->x = w1*x2 + x1*w2 + y1*z2 - z1*y2;
  292          //  quat3->y = w1*y2 - x1*z2 + y1*w2 + z1*x2;
  293          //  quat3->z = w1*z2 + x1*y2 - y1*x2 + z1*w2;
  294          //  return 0;
  295          // }
  296          
  297          
  298          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1042     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
C251 COMPILER V5.60.0,  SEEKFREE_MPU6050                                                   29/04/21  07:07:02  PAGE 6   

  edata size           =       125         12
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       197     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
